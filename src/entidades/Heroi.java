package entidades;

import items.*;

import java.util.ArrayList;
import java.util.Scanner;

/**
 * Classe abstrata que representa um Her√≥i no jogo.
 * Serve como base para todos os tipos de her√≥is jog√°veis.
 * Estende a classe {@link Entidade} e adiciona funcionalidades espec√≠ficas para personagens
 * controlados pelo jogador, como invent√°rio, ouro e compra de itens.
 */
public abstract class Heroi extends Entidade {
    protected int nivel;
    protected int ouro;
    protected ArmaPrincipal armaPrincipal;
    protected ArrayList<Consumivel> inventario;
    protected boolean ataqueEspecialUsado;

    /**
     * Construtor da classe Heroi
     *
     * @param nome Nome do her√≥i
     * @param vidaMax Vida m√°xima do her√≥i
     * @param forca For√ßa do her√≥i
     * @param nivel N√≠vel do her√≥i
     * @param ouro Quantidade de ouro inicial
     * @param armaPrincipal Arma principal do her√≥i
     */
    public Heroi(String nome, int vidaMax,  int forca, int nivel, int ouro, ArmaPrincipal armaPrincipal) {
        super(nome, vidaMax, forca);
        this.nivel = nivel;
        this.ouro = ouro;
        this.armaPrincipal = armaPrincipal;
        this.inventario = new ArrayList<>();
        this.ataqueEspecialUsado = false;
    }

    public Heroi(Heroi heroi) {
        super(heroi.nome, heroi.vidaMax, heroi.forca);
        this.nivel = heroi.nivel;
        this.ouro = heroi.ouro;
        this.armaPrincipal = heroi.armaPrincipal;
        this.inventario = new ArrayList<>();
        this.ataqueEspecialUsado = false;
    }

    public abstract Heroi Clone();

    /**
     * Permite ao her√≥i usar um item do invent√°rio.
     * Apresenta uma interface de menu para o jogador escolher qual item consumir.
     * Identifica o tipo de item (Po√ß√£o ou ConsumivelCombate) e aplica seus efeitos.
     */
    public void usarItem() {
        Scanner in = new Scanner(System.in);
        System.out.print("Quer usar um item do Inventario \uD83D\uDCCB? (S/N)");
        System.out.println(" S√≥ pode usar um Item! Escolha bem!üéØ");
        String escolhaUsar = in.nextLine().trim().toUpperCase();

        // Se n√£o quiser usar um item, retorna ao menu anterior
        if (!escolhaUsar.equals("S")) {
            return;
        }

        // Lista todos os itens consum√≠veis no invent√°rio
        boolean temConsumivel = false;
        for (int i = 0; i < inventario.size(); i++) {
            if (inventario.get(i) instanceof Consumivel) {
                if (inventario.get(i) instanceof Pocao) {
                    Pocao pocao = (Pocao) inventario.get(i);
                    System.out.println((i + 1) + ". üß™ [Po√ß√£o] " + pocao.getNome() +
                            " - Cura: ‚ù§Ô∏è " + pocao.getCura() +
                            " - Aumento de For√ßa: üí™ " + pocao.getAumentoForca());
                    temConsumivel = true;
                } else if (inventario.get(i) instanceof ConsumivelCombate) {
                    ConsumivelCombate consumivelCombate = (ConsumivelCombate) inventario.get(i);
                    System.out.println((i + 1) + ". üí£ [Consum√≠vel de Combate] " + consumivelCombate.getNome() +
                            " - Ataque Especial: ‚öîÔ∏è " + consumivelCombate.getAtaqueInstantaneo());
                    temConsumivel = true;
                }
            }
        }

        // Verifica se h√° itens consum√≠veis no invent√°rio
        if (!temConsumivel) {
            System.out.println("‚ùå Voc√™ n√£o possui itens consum√≠veis no invent√°rio.");
            return;
        }

        System.out.print("üéÆ Digite o n√∫mero do item (ou 0 para sair): ");
        int escolha = in.nextInt();

        // Verifica se o usu√°rio escolheu sair
        if (escolha == 0) {
            System.out.println("üëã Saindo do menu de itens.");
            return;
        }

        if (escolha > 0 && escolha <= inventario.size()) {
            if (inventario.get(escolha - 1) instanceof Consumivel) {
                Consumivel item = (Consumivel) inventario.get(escolha - 1);

                // Verifica o tipo espec√≠fico de consum√≠vel
                if (item instanceof Pocao) {
                    usarPocao((Pocao) item);
                    System.out.println("üß™ Po√ß√£o utilizada com sucesso!");
                } else if (item instanceof ConsumivelCombate) {
                    usarConsumivelCombate((ConsumivelCombate) item);
                    System.out.println("üí• Item de combate utilizado com sucesso!");
                } else {
                    System.out.println("‚ùì Este tipo de consum√≠vel n√£o pode ser usado.");
                }
            } else {
                System.out.println("‚ùå Item selecionado n√£o √© consum√≠vel.");
            }
        } else {
            System.out.println("‚ö†Ô∏è Escolha inv√°lida.");
        }
    }

    /**
     * M√©todo auxiliar para usar uma po√ß√£o espec√≠fica.
     * Aplica os efeitos de cura e aumento de for√ßa da po√ß√£o ao her√≥i.
     * Confirma com o jogador caso a po√ß√£o possa desperdi√ßar pontos de vida.
     *
     * @param pocao A po√ß√£o a ser utilizada
     */
    private void usarPocao(Pocao pocao) {
        // Verifica se a pocao passa a vidaMax e pergunta ao utilizador se quer tomar se passar
        if (this.vidaAtual + pocao.getCura() > this.vidaMax) {
            Scanner in = new Scanner(System.in);
            System.out.println("Usando esta po√ßao vai desperdi√ßar Vida!! Quer usar na mesma? (S/N) ‚öîÔ∏è");
            String desperdicar = in.nextLine().toUpperCase();

            if (!desperdicar.equals("S")) {
                return;
            }
        }
        this.vidaAtual += pocao.getCura();
        if (this.vidaAtual > this.vidaMax) {
            this.vidaAtual = this.vidaMax;
        }
        this.forca += pocao.getAumentoForca();
        inventario.remove(pocao);
        System.out.println("Po√ß√£o " + pocao.getNome() + " usada com sucesso!");
        System.out.println("Vida: " + this.vidaAtual + " | For√ßa: " + this.forca);
    }

    /**
     * M√©todo auxiliar para usar um consum√≠vel de combate espec√≠fico.
     * Aumenta o ataque especial da arma principal do her√≥i com o valor do
     * ataque instant√¢neo do consum√≠vel.
     *
     * @param consumivelCombate O consum√≠vel de combate a ser utilizado
     */
    private void usarConsumivelCombate(ConsumivelCombate consumivelCombate) {


        int ataqueEspecialAtual = this.armaPrincipal.getAtaqueEspecial();

        // Adiciona o ataque instant√¢neo do consum√≠vel ao ataque especial da arma
        int novoAtaqueEspecial = ataqueEspecialAtual + consumivelCombate.getAtaqueInstantaneo();

        // Define o novo valor de ataque especial na arma principal
        this.armaPrincipal.setAtaqueEspecial(novoAtaqueEspecial);

        inventario.remove(consumivelCombate);
        System.out.println("Consum√≠vel de combate " + consumivelCombate.getNome() + " usado com sucesso!");
        System.out.println("Ataque Especial da arma aumentou de " + ataqueEspecialAtual +
                " para " + novoAtaqueEspecial + " (+" + consumivelCombate.getAtaqueInstantaneo() + ")");
    }

    /**
     * Permite ao her√≥i comprar um item.
     * Verifica se o her√≥i tem ouro suficiente e adiciona o item adequadamente
     * (equipando-o se for uma arma, ou adicionando ao invent√°rio se for consum√≠vel).
     *
     * @param item O item a ser comprado
     * @return true se a compra foi realizada com sucesso, false caso contr√°rio
     */
    public boolean comprarItem(ItemHeroi item){
        // Se o ouro for menor que o pre√ßo returna falso
        if (this.ouro < item.getPreco()) {
            return false;
        }
        this.ouro -= item.getPreco();
        if (item instanceof ArmaPrincipal) {
            this.armaPrincipal = (ArmaPrincipal) item;
        } else if (item instanceof Pocao) {
            this.inventario.add((Pocao) item);
        } else if (item instanceof Consumivel) {
            this.inventario.add((Consumivel) item);
        }
        System.out.println("\n‚úÖ Item comprado com sucesso! | Adicionado ao inventario \uD83D\uDCDD \n" + item.getNome()+ "\n");
        System.out.println("üí∞ Ouro restante: " + this.ouro);
        return true;
    }
    /**
     * Obt√©m a quantidade de ouro do her√≥i.
     *
     * @return Quantidade de ouro atual
     */
    public int getOuro() {
        return ouro;
    }

    /**
     * Aumenta a quantidade de ouro do her√≥i.
     *
     * @param quantidade Quantidade de ouro a ser adicionada
     */
    public void ganharOuro(int quantidade) {
        this.ouro += quantidade;
    }

    /**
     * Aumenta o n√≠vel do her√≥i.
     * Incrementa as estat√≠sticas b√°sicas do her√≥i como for√ßa e vida m√°xima.
     */
    public void subirNivel() {
        this.nivel++;
        this.forca += 1;
        this.vidaAtual += 10;
        System.out.println("Voc√™ subiu para o n√≠vel " + this.nivel + "!");
    }

    /**
     * Metodo abstrato do ataque contra uma entidade alvo.
     *
     *
     * @param alvo A entidade que ser√° atacada
     */
    public abstract void atacar (Entidade alvo);

    /**
     * Usa o ataque especial.
     * O ataque especial s√≥ pode ser usado uma vez por batalha.
     *
     * @param alvo A entidade que ser√° atacada.
     */
    public void ataqueEspecial(Entidade alvo) {

        int dano = this.forca + this.armaPrincipal.getAtaqueEspecial();
        System.out.println(this.nome + " usou o ataque especial \uD83D\uDCA5 com " + this.armaPrincipal.getNome() + "!");
        System.out.println("Dano causado: " + dano);
        alvo.receberDano(dano);

    }

    /**
     * Exibe todos os itens no invent√°rio do her√≥i.
     * Lista os detalhes espec√≠ficos de cada tipo de consum√≠vel.
     */
    public void getInventario() {
        // For each para mostrar o inventario
        for (Consumivel item : inventario) {
            if (item instanceof Pocao) {
                Pocao pocao = (Pocao) item;
                System.out.println(pocao.getNome()+":" + " Cura: " + pocao.getCura() + " AumentoForca: " + pocao.getAumentoForca());
            } else if (item instanceof ConsumivelCombate) {
                ConsumivelCombate consumivel = (ConsumivelCombate) item;
                System.out.println(consumivel.getNome()+":" + " Ataque Instantaneo: " +consumivel.getAtaqueInstantaneo());
            }
        }
    }
    /**
     * Retorna a arma principal equipada pelo her√≥i.
     *
     * @return A arma principal atual do her√≥i
     */
    public ArmaPrincipal getArmaPrincipal() {
        return armaPrincipal;
    }

    /**
     * Exibe os detalhes completos do her√≥i na sa√≠da padr√£o.
     * Mostra estat√≠sticas detalhadas incluindo classe, n√≠vel, vida, for√ßa,
     * ouro e detalhes da arma equipada.
     */
    public void exibirDetalhes() {
        System.out.println("üèÜ ===== Detalhes do Her√≥i ===== üèÜ");
        System.out.println("üë§ Classe: " + this.nome);
        System.out.println("üìä N√≠vel: " + this.nivel);
        System.out.println("‚ù§Ô∏è Vida: " + this.vidaAtual + "/" + this.vidaMax);
        System.out.println("üí™ For√ßa: " + this.forca);
        System.out.println("üí∞ Ouro: " + this.ouro);
        System.out.println("‚öîÔ∏è Arma Principal: " + this.armaPrincipal.getNome());
        System.out.println("  - üó°Ô∏è Ataque Base: " + this.armaPrincipal.getAtaque());
        System.out.println("  - üí• Ataque Especial: " + this.armaPrincipal.getAtaqueEspecial()+ "\n");

    }

    /**
     * Rouba Ouro ao Heroi, sendo que se a quantidade for maior que o Ouro Atual, retira apenas o Ouro que o jogador tem,
     * n√£o o deixa a negativo.
     * @param quantidade
     * @return Quantidade de Ouro Roubada
     */
    public int rouboOuro(int quantidade) {
        if (this.getOuro() <= 0)
            return 0;

        int ouroRoubado = Math.min(this.getOuro(), quantidade);
        this.ouro -= ouroRoubado;

        return ouroRoubado;
    }
}
